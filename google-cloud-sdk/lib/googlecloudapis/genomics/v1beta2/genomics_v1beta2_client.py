"""Generated client library for genomics version v1beta2."""
# NOTE: This file is autogenerated and should not be edited by hand.

from googlecloudapis.apitools.base.py import base_api
from googlecloudapis.genomics.v1beta2 import genomics_v1beta2_messages as messages


class GenomicsV1beta2(base_api.BaseApiClient):
  """Generated client library for service genomics version v1beta2."""

  MESSAGES_MODULE = messages

  _PACKAGE = u'genomics'
  _SCOPES = [u'https://www.googleapis.com/auth/bigquery', u'https://www.googleapis.com/auth/devstorage.read_write', u'https://www.googleapis.com/auth/genomics', u'https://www.googleapis.com/auth/genomics.readonly']
  _VERSION = u'v1beta2'
  _CLIENT_ID = '1042881264118.apps.googleusercontent.com'
  _CLIENT_SECRET = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _USER_AGENT = ''
  _CLIENT_CLASS_NAME = u'GenomicsV1beta2'
  _URL_VERSION = u'v1beta2'

  def __init__(self, url='', credentials=None,
               get_credentials=True, http=None, model=None,
               log_request=False, log_response=False,
               credentials_args=None, default_global_params=None,
               additional_http_headers=None):
    """Create a new genomics handle."""
    url = url or u'https://www.googleapis.com/genomics/v1beta2/'
    super(GenomicsV1beta2, self).__init__(
        url, credentials=credentials,
        get_credentials=get_credentials, http=http, model=model,
        log_request=log_request, log_response=log_response,
        credentials_args=credentials_args,
        default_global_params=default_global_params,
        additional_http_headers=additional_http_headers)
    self.beacons = self.BeaconsService(self)
    self.callsets = self.CallsetsService(self)
    self.datasets = self.DatasetsService(self)
    self.experimental_jobs = self.ExperimentalJobsService(self)
    self.experimental = self.ExperimentalService(self)
    self.jobs = self.JobsService(self)
    self.readgroupsets_coveragebuckets = self.ReadgroupsetsCoveragebucketsService(self)
    self.readgroupsets = self.ReadgroupsetsService(self)
    self.reads = self.ReadsService(self)
    self.references_bases = self.ReferencesBasesService(self)
    self.references = self.ReferencesService(self)
    self.referencesets = self.ReferencesetsService(self)
    self.variants = self.VariantsService(self)
    self.variantsets = self.VariantsetsService(self)

  class BeaconsService(base_api.BaseApiService):
    """Service class for the beacons resource."""

    _NAME = u'beacons'

    def __init__(self, client):
      super(GenomicsV1beta2.BeaconsService, self).__init__(client)
      self._method_configs = {
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.beacons.get',
              ordered_params=[u'variantSetId'],
              path_params=[u'variantSetId'],
              query_params=[u'allele', u'position', u'referenceName'],
              relative_path=u'beacons/{variantSetId}',
              request_field='',
              request_type_name=u'GenomicsBeaconsGetRequest',
              response_type_name=u'Beacon',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Get(self, request, global_params=None):
      """This is an experimental API that provides a Global Alliance for Genomics and Health Beacon. It may change at any time.

      Args:
        request: (GenomicsBeaconsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Beacon) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

  class CallsetsService(base_api.BaseApiService):
    """Service class for the callsets resource."""

    _NAME = u'callsets'

    def __init__(self, client):
      super(GenomicsV1beta2.CallsetsService, self).__init__(client)
      self._method_configs = {
          'Create': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.callsets.create',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'callsets',
              request_field='<request>',
              request_type_name=u'CallSet',
              response_type_name=u'CallSet',
              supports_download=False,
          ),
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'genomics.callsets.delete',
              ordered_params=[u'callSetId'],
              path_params=[u'callSetId'],
              query_params=[],
              relative_path=u'callsets/{callSetId}',
              request_field='',
              request_type_name=u'GenomicsCallsetsDeleteRequest',
              response_type_name=u'GenomicsCallsetsDeleteResponse',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.callsets.get',
              ordered_params=[u'callSetId'],
              path_params=[u'callSetId'],
              query_params=[],
              relative_path=u'callsets/{callSetId}',
              request_field='',
              request_type_name=u'GenomicsCallsetsGetRequest',
              response_type_name=u'CallSet',
              supports_download=False,
          ),
          'Patch': base_api.ApiMethodInfo(
              http_method=u'PATCH',
              method_id=u'genomics.callsets.patch',
              ordered_params=[u'callSetId'],
              path_params=[u'callSetId'],
              query_params=[],
              relative_path=u'callsets/{callSetId}',
              request_field=u'callSet',
              request_type_name=u'GenomicsCallsetsPatchRequest',
              response_type_name=u'CallSet',
              supports_download=False,
          ),
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.callsets.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'callsets/search',
              request_field='<request>',
              request_type_name=u'SearchCallSetsRequest',
              response_type_name=u'SearchCallSetsResponse',
              supports_download=False,
          ),
          'Update': base_api.ApiMethodInfo(
              http_method=u'PUT',
              method_id=u'genomics.callsets.update',
              ordered_params=[u'callSetId'],
              path_params=[u'callSetId'],
              query_params=[],
              relative_path=u'callsets/{callSetId}',
              request_field=u'callSet',
              request_type_name=u'GenomicsCallsetsUpdateRequest',
              response_type_name=u'CallSet',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Creates a new call set.

      Args:
        request: (CallSet) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (CallSet) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Delete(self, request, global_params=None):
      """Deletes a call set.

      Args:
        request: (GenomicsCallsetsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GenomicsCallsetsDeleteResponse) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets a call set by ID.

      Args:
        request: (GenomicsCallsetsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (CallSet) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Patch(self, request, global_params=None):
      """Updates a call set. This method supports patch semantics.

      Args:
        request: (GenomicsCallsetsPatchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (CallSet) The response message.
      """
      config = self.GetMethodConfig('Patch')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Search(self, request, global_params=None):
      """Gets a list of call sets matching the criteria.

      Args:
        request: (SearchCallSetsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchCallSetsResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Update(self, request, global_params=None):
      """Updates a call set.

      Args:
        request: (GenomicsCallsetsUpdateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (CallSet) The response message.
      """
      config = self.GetMethodConfig('Update')
      return self._RunMethod(
          config, request, global_params=global_params)

  class DatasetsService(base_api.BaseApiService):
    """Service class for the datasets resource."""

    _NAME = u'datasets'

    def __init__(self, client):
      super(GenomicsV1beta2.DatasetsService, self).__init__(client)
      self._method_configs = {
          'Create': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.datasets.create',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'datasets',
              request_field='<request>',
              request_type_name=u'Dataset',
              response_type_name=u'Dataset',
              supports_download=False,
          ),
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'genomics.datasets.delete',
              ordered_params=[u'datasetId'],
              path_params=[u'datasetId'],
              query_params=[],
              relative_path=u'datasets/{datasetId}',
              request_field='',
              request_type_name=u'GenomicsDatasetsDeleteRequest',
              response_type_name=u'GenomicsDatasetsDeleteResponse',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.datasets.get',
              ordered_params=[u'datasetId'],
              path_params=[u'datasetId'],
              query_params=[],
              relative_path=u'datasets/{datasetId}',
              request_field='',
              request_type_name=u'GenomicsDatasetsGetRequest',
              response_type_name=u'Dataset',
              supports_download=False,
          ),
          'List': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.datasets.list',
              ordered_params=[],
              path_params=[],
              query_params=[u'pageSize', u'pageToken', u'projectNumber'],
              relative_path=u'datasets',
              request_field='',
              request_type_name=u'GenomicsDatasetsListRequest',
              response_type_name=u'ListDatasetsResponse',
              supports_download=False,
          ),
          'Patch': base_api.ApiMethodInfo(
              http_method=u'PATCH',
              method_id=u'genomics.datasets.patch',
              ordered_params=[u'datasetId'],
              path_params=[u'datasetId'],
              query_params=[],
              relative_path=u'datasets/{datasetId}',
              request_field=u'dataset',
              request_type_name=u'GenomicsDatasetsPatchRequest',
              response_type_name=u'Dataset',
              supports_download=False,
          ),
          'Undelete': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.datasets.undelete',
              ordered_params=[u'datasetId'],
              path_params=[u'datasetId'],
              query_params=[],
              relative_path=u'datasets/{datasetId}/undelete',
              request_field='',
              request_type_name=u'GenomicsDatasetsUndeleteRequest',
              response_type_name=u'Dataset',
              supports_download=False,
          ),
          'Update': base_api.ApiMethodInfo(
              http_method=u'PUT',
              method_id=u'genomics.datasets.update',
              ordered_params=[u'datasetId'],
              path_params=[u'datasetId'],
              query_params=[],
              relative_path=u'datasets/{datasetId}',
              request_field=u'dataset',
              request_type_name=u'GenomicsDatasetsUpdateRequest',
              response_type_name=u'Dataset',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Creates a new dataset.

      Args:
        request: (Dataset) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Dataset) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Delete(self, request, global_params=None):
      """Deletes a dataset.

      Args:
        request: (GenomicsDatasetsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GenomicsDatasetsDeleteResponse) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets a dataset by ID.

      Args:
        request: (GenomicsDatasetsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Dataset) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def List(self, request, global_params=None):
      """Lists all datasets.

      Args:
        request: (GenomicsDatasetsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListDatasetsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Patch(self, request, global_params=None):
      """Updates a dataset. This method supports patch semantics.

      Args:
        request: (GenomicsDatasetsPatchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Dataset) The response message.
      """
      config = self.GetMethodConfig('Patch')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Undelete(self, request, global_params=None):
      """Undeletes a dataset by restoring a dataset which was deleted via this API. This operation is only possible for a week after the deletion occurred.

      Args:
        request: (GenomicsDatasetsUndeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Dataset) The response message.
      """
      config = self.GetMethodConfig('Undelete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Update(self, request, global_params=None):
      """Updates a dataset.

      Args:
        request: (GenomicsDatasetsUpdateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Dataset) The response message.
      """
      config = self.GetMethodConfig('Update')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ExperimentalJobsService(base_api.BaseApiService):
    """Service class for the experimental_jobs resource."""

    _NAME = u'experimental_jobs'

    def __init__(self, client):
      super(GenomicsV1beta2.ExperimentalJobsService, self).__init__(client)
      self._method_configs = {
          'Create': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.experimental.jobs.create',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'experimental/jobs/create',
              request_field='<request>',
              request_type_name=u'ExperimentalCreateJobRequest',
              response_type_name=u'ExperimentalCreateJobResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Creates and asynchronously runs an ad-hoc job. This is an experimental call and may be removed or changed at any time.

      Args:
        request: (ExperimentalCreateJobRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ExperimentalCreateJobResponse) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ExperimentalService(base_api.BaseApiService):
    """Service class for the experimental resource."""

    _NAME = u'experimental'

    def __init__(self, client):
      super(GenomicsV1beta2.ExperimentalService, self).__init__(client)
      self._method_configs = {
          }

      self._upload_configs = {
          }

  class JobsService(base_api.BaseApiService):
    """Service class for the jobs resource."""

    _NAME = u'jobs'

    def __init__(self, client):
      super(GenomicsV1beta2.JobsService, self).__init__(client)
      self._method_configs = {
          'Cancel': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.jobs.cancel',
              ordered_params=[u'jobId'],
              path_params=[u'jobId'],
              query_params=[],
              relative_path=u'jobs/{jobId}/cancel',
              request_field='',
              request_type_name=u'GenomicsJobsCancelRequest',
              response_type_name=u'GenomicsJobsCancelResponse',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.jobs.get',
              ordered_params=[u'jobId'],
              path_params=[u'jobId'],
              query_params=[],
              relative_path=u'jobs/{jobId}',
              request_field='',
              request_type_name=u'GenomicsJobsGetRequest',
              response_type_name=u'Job',
              supports_download=False,
          ),
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.jobs.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'jobs/search',
              request_field='<request>',
              request_type_name=u'SearchJobsRequest',
              response_type_name=u'SearchJobsResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Cancel(self, request, global_params=None):
      """Cancels a job by ID. Note that it is possible for partial results to be generated and stored for cancelled jobs.

      Args:
        request: (GenomicsJobsCancelRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GenomicsJobsCancelResponse) The response message.
      """
      config = self.GetMethodConfig('Cancel')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets a job by ID.

      Args:
        request: (GenomicsJobsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Job) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Search(self, request, global_params=None):
      """Gets a list of jobs matching the criteria.

      Args:
        request: (SearchJobsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchJobsResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ReadgroupsetsCoveragebucketsService(base_api.BaseApiService):
    """Service class for the readgroupsets_coveragebuckets resource."""

    _NAME = u'readgroupsets_coveragebuckets'

    def __init__(self, client):
      super(GenomicsV1beta2.ReadgroupsetsCoveragebucketsService, self).__init__(client)
      self._method_configs = {
          'List': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.readgroupsets.coveragebuckets.list',
              ordered_params=[u'readGroupSetId'],
              path_params=[u'readGroupSetId'],
              query_params=[u'pageSize', u'pageToken', u'range_end', u'range_referenceName', u'range_start', u'targetBucketWidth'],
              relative_path=u'readgroupsets/{readGroupSetId}/coveragebuckets',
              request_field='',
              request_type_name=u'GenomicsReadgroupsetsCoveragebucketsListRequest',
              response_type_name=u'ListCoverageBucketsResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def List(self, request, global_params=None):
      """Lists fixed width coverage buckets for a ReadGroupSet, each of which correspond to a range of a reference sequence. Each bucket summarizes coverage information across its corresponding genomic range. Coverage is defined as the number of reads which are aligned to a given base in the reference sequence. Coverage buckets are available at various bucket widths, enabling various coverage "zoom levels". The caller must have READ permissions for the target ReadGroupSet.

      Args:
        request: (GenomicsReadgroupsetsCoveragebucketsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListCoverageBucketsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ReadgroupsetsService(base_api.BaseApiService):
    """Service class for the readgroupsets resource."""

    _NAME = u'readgroupsets'

    def __init__(self, client):
      super(GenomicsV1beta2.ReadgroupsetsService, self).__init__(client)
      self._method_configs = {
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'genomics.readgroupsets.delete',
              ordered_params=[u'readGroupSetId'],
              path_params=[u'readGroupSetId'],
              query_params=[],
              relative_path=u'readgroupsets/{readGroupSetId}',
              request_field='',
              request_type_name=u'GenomicsReadgroupsetsDeleteRequest',
              response_type_name=u'GenomicsReadgroupsetsDeleteResponse',
              supports_download=False,
          ),
          'Export': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.readgroupsets.export',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'readgroupsets/export',
              request_field='<request>',
              request_type_name=u'ExportReadGroupSetsRequest',
              response_type_name=u'ExportReadGroupSetsResponse',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.readgroupsets.get',
              ordered_params=[u'readGroupSetId'],
              path_params=[u'readGroupSetId'],
              query_params=[],
              relative_path=u'readgroupsets/{readGroupSetId}',
              request_field='',
              request_type_name=u'GenomicsReadgroupsetsGetRequest',
              response_type_name=u'ReadGroupSet',
              supports_download=False,
          ),
          'Import': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.readgroupsets.import',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'readgroupsets/import',
              request_field='<request>',
              request_type_name=u'ImportReadGroupSetsRequest',
              response_type_name=u'ImportReadGroupSetsResponse',
              supports_download=False,
          ),
          'Patch': base_api.ApiMethodInfo(
              http_method=u'PATCH',
              method_id=u'genomics.readgroupsets.patch',
              ordered_params=[u'readGroupSetId'],
              path_params=[u'readGroupSetId'],
              query_params=[],
              relative_path=u'readgroupsets/{readGroupSetId}',
              request_field=u'readGroupSet',
              request_type_name=u'GenomicsReadgroupsetsPatchRequest',
              response_type_name=u'ReadGroupSet',
              supports_download=False,
          ),
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.readgroupsets.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'readgroupsets/search',
              request_field='<request>',
              request_type_name=u'SearchReadGroupSetsRequest',
              response_type_name=u'SearchReadGroupSetsResponse',
              supports_download=False,
          ),
          'Update': base_api.ApiMethodInfo(
              http_method=u'PUT',
              method_id=u'genomics.readgroupsets.update',
              ordered_params=[u'readGroupSetId'],
              path_params=[u'readGroupSetId'],
              query_params=[],
              relative_path=u'readgroupsets/{readGroupSetId}',
              request_field=u'readGroupSet',
              request_type_name=u'GenomicsReadgroupsetsUpdateRequest',
              response_type_name=u'ReadGroupSet',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Delete(self, request, global_params=None):
      """Deletes a ReadGroupSet.

      Args:
        request: (GenomicsReadgroupsetsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GenomicsReadgroupsetsDeleteResponse) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Export(self, request, global_params=None):
      """Exports ReadGroupSets to a BAM file in Google Cloud Storage. Note that currently there may be some differences between exported BAM files and the original BAM file at the time of import. In particular, comments in the input file header will not be preserved, and some custom tags will be converted to strings.

      Args:
        request: (ExportReadGroupSetsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ExportReadGroupSetsResponse) The response message.
      """
      config = self.GetMethodConfig('Export')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets a ReadGroupSet by ID.

      Args:
        request: (GenomicsReadgroupsetsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ReadGroupSet) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Import(self, request, global_params=None):
      """Creates ReadGroupSets by asynchronously importing the provided information. Note that currently comments in the input file header are not imported and some custom tags will be converted to strings, rather than preserving tag types. The caller must have WRITE permissions to the dataset.

      Args:
        request: (ImportReadGroupSetsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ImportReadGroupSetsResponse) The response message.
      """
      config = self.GetMethodConfig('Import')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Patch(self, request, global_params=None):
      """Updates a ReadGroupSet. This method supports patch semantics.

      Args:
        request: (GenomicsReadgroupsetsPatchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ReadGroupSet) The response message.
      """
      config = self.GetMethodConfig('Patch')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Search(self, request, global_params=None):
      """Gets a list of ReadGroupSets matching the criteria.

      Args:
        request: (SearchReadGroupSetsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchReadGroupSetsResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Update(self, request, global_params=None):
      """Updates a ReadGroupSet.

      Args:
        request: (GenomicsReadgroupsetsUpdateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ReadGroupSet) The response message.
      """
      config = self.GetMethodConfig('Update')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ReadsService(base_api.BaseApiService):
    """Service class for the reads resource."""

    _NAME = u'reads'

    def __init__(self, client):
      super(GenomicsV1beta2.ReadsService, self).__init__(client)
      self._method_configs = {
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.reads.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'reads/search',
              request_field='<request>',
              request_type_name=u'SearchReadsRequest',
              response_type_name=u'SearchReadsResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Search(self, request, global_params=None):
      """Gets a list of reads for one or more ReadGroupSets. Reads search operates over a genomic coordinate space of reference sequence & position defined over the reference sequences to which the requested ReadGroupSets are aligned. If a target positional range is specified, search returns all reads whose alignment to the reference genome overlap the range. A query which specifies only ReadGroupSet IDs yields all reads in those ReadGroupSets, including unmapped reads. All reads returned (including reads on subsequent pages) are ordered by genomic coordinate (reference sequence & position). Reads with equivalent genomic coordinates are returned in a deterministic order.

      Args:
        request: (SearchReadsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchReadsResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ReferencesBasesService(base_api.BaseApiService):
    """Service class for the references_bases resource."""

    _NAME = u'references_bases'

    def __init__(self, client):
      super(GenomicsV1beta2.ReferencesBasesService, self).__init__(client)
      self._method_configs = {
          'List': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.references.bases.list',
              ordered_params=[u'referenceId'],
              path_params=[u'referenceId'],
              query_params=[u'end', u'pageSize', u'pageToken', u'start'],
              relative_path=u'references/{referenceId}/bases',
              request_field='',
              request_type_name=u'GenomicsReferencesBasesListRequest',
              response_type_name=u'ListBasesResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def List(self, request, global_params=None):
      """Lists the bases in a reference, optionally restricted to a range.

Implements GAReferenceMethods::getReferenceBases (https://github.com/ga4gh/schemas).

      Args:
        request: (GenomicsReferencesBasesListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListBasesResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ReferencesService(base_api.BaseApiService):
    """Service class for the references resource."""

    _NAME = u'references'

    def __init__(self, client):
      super(GenomicsV1beta2.ReferencesService, self).__init__(client)
      self._method_configs = {
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.references.get',
              ordered_params=[u'referenceId'],
              path_params=[u'referenceId'],
              query_params=[],
              relative_path=u'references/{referenceId}',
              request_field='',
              request_type_name=u'GenomicsReferencesGetRequest',
              response_type_name=u'Reference',
              supports_download=False,
          ),
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.references.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'references/search',
              request_field='<request>',
              request_type_name=u'SearchReferencesRequest',
              response_type_name=u'SearchReferencesResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Get(self, request, global_params=None):
      """Gets a reference.

Implements GAReferenceMethods::getReference (https://github.com/ga4gh/schemas).

      Args:
        request: (GenomicsReferencesGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Reference) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Search(self, request, global_params=None):
      """Searches for references which match the given criteria.

Implements GAReferenceMethods::searchReferences (https://github.com/ga4gh/schemas).

      Args:
        request: (SearchReferencesRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchReferencesResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ReferencesetsService(base_api.BaseApiService):
    """Service class for the referencesets resource."""

    _NAME = u'referencesets'

    def __init__(self, client):
      super(GenomicsV1beta2.ReferencesetsService, self).__init__(client)
      self._method_configs = {
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.referencesets.get',
              ordered_params=[u'referenceSetId'],
              path_params=[u'referenceSetId'],
              query_params=[],
              relative_path=u'referencesets/{referenceSetId}',
              request_field='',
              request_type_name=u'GenomicsReferencesetsGetRequest',
              response_type_name=u'ReferenceSet',
              supports_download=False,
          ),
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.referencesets.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'referencesets/search',
              request_field='<request>',
              request_type_name=u'SearchReferenceSetsRequest',
              response_type_name=u'SearchReferenceSetsResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Get(self, request, global_params=None):
      """Gets a reference set.

Implements GAReferenceMethods::getReferenceSet (https://github.com/ga4gh/schemas).

      Args:
        request: (GenomicsReferencesetsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ReferenceSet) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Search(self, request, global_params=None):
      """Searches for reference sets which match the given criteria.

Implements GAReferenceMethods::searchReferenceSets (https://github.com/ga4gh/schemas).

      Args:
        request: (SearchReferenceSetsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchReferenceSetsResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

  class VariantsService(base_api.BaseApiService):
    """Service class for the variants resource."""

    _NAME = u'variants'

    def __init__(self, client):
      super(GenomicsV1beta2.VariantsService, self).__init__(client)
      self._method_configs = {
          'Create': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.variants.create',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'variants',
              request_field='<request>',
              request_type_name=u'Variant',
              response_type_name=u'Variant',
              supports_download=False,
          ),
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'genomics.variants.delete',
              ordered_params=[u'variantId'],
              path_params=[u'variantId'],
              query_params=[],
              relative_path=u'variants/{variantId}',
              request_field='',
              request_type_name=u'GenomicsVariantsDeleteRequest',
              response_type_name=u'GenomicsVariantsDeleteResponse',
              supports_download=False,
          ),
          'Export': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.variants.export',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'variants/export',
              request_field='<request>',
              request_type_name=u'ExportVariantsRequest',
              response_type_name=u'ExportVariantsResponse',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.variants.get',
              ordered_params=[u'variantId'],
              path_params=[u'variantId'],
              query_params=[],
              relative_path=u'variants/{variantId}',
              request_field='',
              request_type_name=u'GenomicsVariantsGetRequest',
              response_type_name=u'Variant',
              supports_download=False,
          ),
          'Import': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.variants.import',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'variants/import',
              request_field='<request>',
              request_type_name=u'ImportVariantsRequest',
              response_type_name=u'ImportVariantsResponse',
              supports_download=False,
          ),
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.variants.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'variants/search',
              request_field='<request>',
              request_type_name=u'SearchVariantsRequest',
              response_type_name=u'SearchVariantsResponse',
              supports_download=False,
          ),
          'Update': base_api.ApiMethodInfo(
              http_method=u'PUT',
              method_id=u'genomics.variants.update',
              ordered_params=[u'variantId'],
              path_params=[u'variantId'],
              query_params=[],
              relative_path=u'variants/{variantId}',
              request_field=u'variant',
              request_type_name=u'GenomicsVariantsUpdateRequest',
              response_type_name=u'Variant',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Creates a new variant.

      Args:
        request: (Variant) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Variant) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Delete(self, request, global_params=None):
      """Deletes a variant.

      Args:
        request: (GenomicsVariantsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GenomicsVariantsDeleteResponse) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Export(self, request, global_params=None):
      """Exports variant data to an external destination.

      Args:
        request: (ExportVariantsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ExportVariantsResponse) The response message.
      """
      config = self.GetMethodConfig('Export')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets a variant by ID.

      Args:
        request: (GenomicsVariantsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Variant) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Import(self, request, global_params=None):
      """Creates variant data by asynchronously importing the provided information. The variants for import will be merged with any existing data and each other according to the behavior of mergeVariants. In particular, this means for merged VCF variants that have conflicting INFO fields, some data will be arbitrarily discarded. As a special case, for single-sample VCF files, QUAL and FILTER fields will be moved to the call level; these are sometimes interpreted in a call-specific context. Imported VCF headers are appended to the metadata already in a VariantSet.

      Args:
        request: (ImportVariantsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ImportVariantsResponse) The response message.
      """
      config = self.GetMethodConfig('Import')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Search(self, request, global_params=None):
      """Gets a list of variants matching the criteria.

      Args:
        request: (SearchVariantsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchVariantsResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Update(self, request, global_params=None):
      """Updates a variant's names and info fields. All other modifications are silently ignored. Returns the modified variant without its calls.

      Args:
        request: (GenomicsVariantsUpdateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Variant) The response message.
      """
      config = self.GetMethodConfig('Update')
      return self._RunMethod(
          config, request, global_params=global_params)

  class VariantsetsService(base_api.BaseApiService):
    """Service class for the variantsets resource."""

    _NAME = u'variantsets'

    def __init__(self, client):
      super(GenomicsV1beta2.VariantsetsService, self).__init__(client)
      self._method_configs = {
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'genomics.variantsets.delete',
              ordered_params=[u'variantSetId'],
              path_params=[u'variantSetId'],
              query_params=[],
              relative_path=u'variantsets/{variantSetId}',
              request_field='',
              request_type_name=u'GenomicsVariantsetsDeleteRequest',
              response_type_name=u'GenomicsVariantsetsDeleteResponse',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'genomics.variantsets.get',
              ordered_params=[u'variantSetId'],
              path_params=[u'variantSetId'],
              query_params=[],
              relative_path=u'variantsets/{variantSetId}',
              request_field='',
              request_type_name=u'GenomicsVariantsetsGetRequest',
              response_type_name=u'VariantSet',
              supports_download=False,
          ),
          'MergeVariants': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.variantsets.mergeVariants',
              ordered_params=[u'variantSetId'],
              path_params=[u'variantSetId'],
              query_params=[],
              relative_path=u'variantsets/{variantSetId}/mergeVariants',
              request_field=u'mergeVariantsRequest',
              request_type_name=u'GenomicsVariantsetsMergeVariantsRequest',
              response_type_name=u'GenomicsVariantsetsMergeVariantsResponse',
              supports_download=False,
          ),
          'Patch': base_api.ApiMethodInfo(
              http_method=u'PATCH',
              method_id=u'genomics.variantsets.patch',
              ordered_params=[u'variantSetId'],
              path_params=[u'variantSetId'],
              query_params=[],
              relative_path=u'variantsets/{variantSetId}',
              request_field=u'variantSet',
              request_type_name=u'GenomicsVariantsetsPatchRequest',
              response_type_name=u'VariantSet',
              supports_download=False,
          ),
          'Search': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'genomics.variantsets.search',
              ordered_params=[],
              path_params=[],
              query_params=[],
              relative_path=u'variantsets/search',
              request_field='<request>',
              request_type_name=u'SearchVariantSetsRequest',
              response_type_name=u'SearchVariantSetsResponse',
              supports_download=False,
          ),
          'Update': base_api.ApiMethodInfo(
              http_method=u'PUT',
              method_id=u'genomics.variantsets.update',
              ordered_params=[u'variantSetId'],
              path_params=[u'variantSetId'],
              query_params=[],
              relative_path=u'variantsets/{variantSetId}',
              request_field=u'variantSet',
              request_type_name=u'GenomicsVariantsetsUpdateRequest',
              response_type_name=u'VariantSet',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Delete(self, request, global_params=None):
      """Deletes the contents of a variant set. The variant set object is not deleted.

      Args:
        request: (GenomicsVariantsetsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GenomicsVariantsetsDeleteResponse) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets a variant set by ID.

      Args:
        request: (GenomicsVariantsetsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (VariantSet) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def MergeVariants(self, request, global_params=None):
      """Merges the given variants with existing variants. Each variant will be merged with an existing variant that matches its reference sequence, start, end, reference bases, and alternative bases. If no such variant exists, a new one will be created.

When variants are merged, the call information from the new variant is added to the existing variant, and other fields (such as key/value pairs) are discarded.

      Args:
        request: (GenomicsVariantsetsMergeVariantsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GenomicsVariantsetsMergeVariantsResponse) The response message.
      """
      config = self.GetMethodConfig('MergeVariants')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Patch(self, request, global_params=None):
      """Updates a variant set's metadata. All other modifications are silently ignored. Returns the modified variant set. This method supports patch semantics.

      Args:
        request: (GenomicsVariantsetsPatchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (VariantSet) The response message.
      """
      config = self.GetMethodConfig('Patch')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Search(self, request, global_params=None):
      """Returns a list of all variant sets matching search criteria.

      Args:
        request: (SearchVariantSetsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (SearchVariantSetsResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Update(self, request, global_params=None):
      """Updates a variant set's metadata. All other modifications are silently ignored. Returns the modified variant set.

      Args:
        request: (GenomicsVariantsetsUpdateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (VariantSet) The response message.
      """
      config = self.GetMethodConfig('Update')
      return self._RunMethod(
          config, request, global_params=global_params)

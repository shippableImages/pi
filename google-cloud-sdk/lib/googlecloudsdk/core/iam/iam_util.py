# Copyright 2015 Google Inc. All Rights Reserved.

"""General IAM utilities used by the Cloud SDK."""


def AddArgsForAddIamPolicyBinding(parser, known_roles):
  """Adds the IAM policy binding arguments for the known roles.

  Args:
    parser: An argparse.ArgumentParser-like object to which we add the argss.
    known_roles: A list of IAM roles the command knows about and for which we
        we want to add args for.
  """
  for role in known_roles:
    parser.add_argument(
        '--{0}'.format(role), help='Assign member to role {0}'.format(role))


def AddBindingToIamPolicy(messages, policy, args, known_roles):
  """Given an IAM policy, add new bindings as specified by args.

  Args:
    messages: ToolResults API message classes generated by apitools.
        Required to create new bindings of the proper type.
    policy: IAM policy to which we want to add the bindings.
    args: Arguments from the command line that contain possible values for
        keys added by AddArgsForAddIamPolicyBinding. This is what defines what
        bindings we add.
    known_roles: A list of IAM roles the command knows about and for which we
        have arguments defined.
  """
  for role in known_roles:
    member = getattr(args, role, None)
    if not member:
      continue

    # Just add the new binding at the end. Doesn't matter if there's already
    # a binding for the same role.
    policy.bindings.append(messages.Binding(
        members=[member],
        role='roles/{0}'.format(role)))


def RemoveBindingFromIamPolicy(policy, args, known_roles):
  """Given an IAM policy, add remove bindings as specified by the args.

  Args:
    policy: IAM policy from which we want to remove bindings.
    args: Arguments from the command line that contain possible values for
        keys added by AddArgsForAddIamPolicyBinding. This is what defines what
        bindings we remove.
    known_roles: A list of IAM roles the command knows about and for which we
        have arguments defined.
  """
  for role in known_roles:
    member = getattr(args, role, None)
    if not member:
      continue

    for binding in policy.bindings:
      if binding.role != 'roles/{0}'.format(role):
        continue
      if member not in binding.members:
        continue
      binding.members.remove(member)

  # It's ok if some bindings have 0 members. The server should filter them out.
